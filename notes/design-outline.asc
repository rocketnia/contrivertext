ContriverText design outline
============================

link:../README.asc[The readme] describes some high-level motivation and conveys some of the player-facing appearance of the ContriverText IF engine. Here I explore some of the more challenging and compromising parts of the design.

Design: World model
-------------------

The world model is an ontology: Ongoing relationships between objects are time-annotated relational statements in this ontology, and some very low-powered inference is used so certain facts can derive from other facts. Only a few root queries are used, although they can be programmed somewhat for game-specific behavior:

Given a player, a standpoint character, and a topic, determine the past, present, and future of that topic.

Given a standpoint character and an ontology descibing the present of a topic, determine a static description.

Given a standpoint character and an ontology describing the future of a topic, determine an interactive selection interface, including an equipment state machine and contextual commands per topic.

Given a standpoint character and a set of chronological happenings representing the past of some topics, determine a family of summaries at various levels of detail.

Given a level-of-detail summary of topic pasts, determine an unfoldable description.

Beyond the design scope: Mistaken identity
------------------------------------------

The very fact that the player is viewing a description and history of an object makes an implicit and falsifiable assumption: That the object's history was actually contiguous in the way the player character thinks, and that its behavior isn't better understood in terms of a different system of objects.

For instance, the object may have been replaced with a forgery while the player character wasn't looking. Alternatively, if the object is an animation, the player character may fully understand it's a series of independent frames, but they're humoring the illusion of persistence anyway. As another example, the object may be a jigsaw puzzle that was at one time better understood as a set of jigsaw puzzle pieces with independent histories. Or the object may be traveling through time, having a single history from its perspective but a set of overlapping histories from ours.

Let's not try to design a general-purpose framework for these deceptions and reframings. A writer of prose already arranges their terminology, metaphors, and viewpoint characters in a way that may be reconceived later in the story. If they want the player character to conceive of multiple theories of what is happening, in at least some cases they can describe those theories in terms of fully separate objects with links between them. That will probably be sufficient for a wide range of stories, and advanced coding techniques could support a wider range than that.

Eventually even the most ambitious coding will hit a wall where significant changes to the interface itself are needed: Consider an author who wants to tell a story where the player can fabricate elaborate alibis to tell NPCs, or where they can hypothesize that a genie has instantaneously rearranged and re-sewn their shirt buttons while they were blinking. In these cases, some of the most abstract parts of the programming language may actually be able to contain this generality, but the two-panel textual UI will be insufficient. The author will have to construct their own UI layer, which is somewhat out of the scope of this IF engine (and would be more in-scope for a general-purpose programming language).
